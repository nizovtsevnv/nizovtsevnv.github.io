---
blog: ru
lang: ru
title: Hello Dlang
date: 2015-08-27
commentable: true
tags: dlang
---

%img{src: "http://dlang.org/images/dlogo.svg", style: "float: left; margin: 0 10px 10px 0;"}

%p
  В статье описан "Хэлло Ворлд" для чудесного компилируемого мультипарадигменного языка D.
%p
  Не смотря на то, что материалов в сети достаточно мало, они всё же есть в необходимом для понимания количестве. Сообщество и вся инфраструктура языка также очень компактны, но достаточно сильны для тех, кто готов пройти путь отличный от копипасты. От себя лишь добавлю - сам по себе язык D, в сегодняшнем мире монстров C/C++ и подростков Go, Rust,- стоит того, чтобы погрузиться в него.
^^^
%br

Вводные данные по языку D можно почерпнуть из:

%ul
  %li
    %a{href: "https://ru.wikipedia.org/wiki/D_%28%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%29"} Википедии
  %li
    Книги "Язык программирования D" от евангелиста языка Андрея Александреску
  %li
    Книги "D Cookbook"
  %li
    И самой свежей из них "Programming in D"

%p Без лишних вступлений, с лозунгом "лучше один раз увидеть",- встречайте пример простейшего полностью "голого" Хэлло Ворлд:

:code
  # lang: c

  import std.stdio;

  void main(){
    writeln("Hello World!");
  }

%p Не смотря на простоту примера, уже по этому тексту видно, что язык использует импорт модулей и C-подобный синтаксис.

%p Добавим к этому примеру пространство имён для импортируемых функций:

:code
  # lang: d

  import some_package = std.stdio;

  void main(){
    some_package.writeln("Hello World!");
  }

%p
  Не смотря на то, что здесь "заворачивание" функциональности подключаемого модуля излишне,- оно может быть полезно в проектах большой сложности с пересекающимися пространствами имён или для синтаксической выразительности.

%p
  Добавим немного сахара, синтаксис языка позволяет применить функции языка как методы объектов (см.
  %a{href: "https://en.wikipedia.org/wiki/Uniform_Function_Call_Syntax"} UFCS
  )

:code
  # lang: d

  import std.stdio;

  void main(){
    "Hello World!".writeln();
  }

%p
  И напоследок немного "параллельного" кода,- запустим приём строкового сообщения в параллельном потоке, отправим строковое сообщение из основного потока, по факту приёма строки в параллельном потоке напечатаем наше сообщение:

:code
  # lang: d

  #!/usr/bin/env rdmd

  import std.stdio, std.concurrency;

  void main(){
    auto tid = spawn(
      function void(){
        receiveOnly!(string)().writeln();
      }
    );

    send(tid, "Hello World!");
  }

%p На самом деле этот список можно продолжать очень долго, попробуйте и возможно вы будете приятно удивляться чаще и расстраиваться реже, удачи в погружении.
