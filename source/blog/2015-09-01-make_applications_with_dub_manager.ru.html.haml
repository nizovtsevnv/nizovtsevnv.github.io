---
lang: ru
title: Создание приложения на языке D с помощью DUB
date: 2015-09-01
commentable: true
tags: dlang
---

%p
  В этой статье я расскажу зачем и как нужно использовать менеджер пакетов DUB при разработке приложений на языке D.
^^^
%p
  В целом на сегодня для сборки разрабатываемых приложений на языке D мы имеем три основных инструмента:
  %ul
    %li
      %strong DMD / GDC / LDC
      \- для непосредственной сборки компиляторами (DMD - рекомендуется для разработки как самый быстрый в компиляции, GDC/LDC - рекомендуется для оптимизации сборки при релизе);
    %li
      %strong DUB
      \- для сборки приложений с солидными внешними зависимостями, менеджер модулей и по совместительству помощник по сборке (для примера близкая аналогия из мира Ruby, dub = gem + bundle);
    %li
      %strong RDMD
      \- для использования модулей D в качестве shell-скриптов, собирает скрипт в первый запуск на лету и далее использует кэш (любой скрипт превращается в shell-скрипт добавлением в первой строке файла shebang вида "#!/usr/bin/env rdmd").

%h3 Подготовительный этап

%ol
  %li
    Установите компилятор с языка D. Для этого пройдите по ссылке на
    %a{href: "http://dlang.org/download.html", target: "blank"} официальный сайт
    , выберите необходимый вариант, скачайте и установите его. На текущий момент доступны компиляторы серии DMD для следующих ОС: Debian/Ubuntu, Fedora/CentOS, FreeBSD, OpenSuse, OS X, Windows.
  %li
    Установите менеджер пакетов DUB.
    Для установки перейдите по ссылке на
    %a{href: "http://code.dlang.org/download", target: "blank"} официальный сайт
    , выберите необходимый вариант, скачайте и установите его. На текущий момент DUB доступен как в виде исходных текстов так и в сборке для ОС: Linux, OS X, Windows.

%h3 Создание и настройка сборки приложения

%ol
  %li Откройте терминал и перейдите в папку ваших проектов.
  %li
    Инициализируйте приложение с помощью команды

    :code
      # lang: shell
      dub init my_project
  %li Перейдите в каталог вашего проекта, в нём вы увидите свежесозданные манифест-файл "dub.json", каталог для исходных текстов "source" содержащий базовый файл исходных текстов "app.d";
  %li
    Заполните все поля файла dub.json и по необходимости дополните своими настройками.
    Материалы по формату представления данных JSON вы можете найти
    %a{href: "http://json.org/json-ru.html", target: "blank"} здесь
    , а информацию по всевозможным настройкам манифест-файла
    %a{href: "http://code.dlang.org/package-format?lang=json", target: "blank"} здесь
    \.
    Например, вы можете изменить имя базового файла исходных текстов с "app.d" на "application.d", каталог для файлов собранного ПО с текущего на подкаталог "build", а название для результирующего исполняемого файла проекта указать "my_project", для этого в "dub.json" понадобится добавить следующие строки:
    :code
      # lang: json
      {...
        "configurations": [
          {...
            "mainSourceFile": "source/application.d",
            "name": "my_project",
            "targetPath": "build",
            "workingDirectory": "build"
          ...},
      ...}
  %li Создайте необходимые исходные тексты и медиа-файлы в каталоге source;
  %li
    Для сборки и запуска отладочного варианта приложения выполните консольную команду из каталога проекта:
    :code
      # lang: c
      dub run

    Для запуска встроенных юнит-тестов выполните:
    :code
      # lang: c
      dub test

    Для сборки отладочного варианта приложения выполните:
    :code
      # lang: c
      dub build

    Для сборки релиза приложения выполните:
    :code
      # lang: c
      dub build --build=release

  %p Если вашей целью является создание бесплатного общедоступного приложения или библиотеки, то с помощью DUB вы также можете поделиться вашим проектом через единый репозиторий пакетов.

  %p На этом краткий экскурс в необходимый минимум для создания приложения завершён, желаю вам великих достижений и приятного изучения.

